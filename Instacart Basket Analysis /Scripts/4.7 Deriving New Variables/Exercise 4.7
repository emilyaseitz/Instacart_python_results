{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a6be3552",
   "metadata": {},
   "source": [
    "## Exercise 4.7 Deriving new variables"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f677a30",
   "metadata": {},
   "source": [
    "### Scripts used:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b2606a2",
   "metadata": {},
   "source": [
    "### 1. If statements with User Defined Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b0fbf36",
   "metadata": {},
   "source": [
    "### 2. If Statements with loc() Function"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e24486b9",
   "metadata": {},
   "source": [
    "### 3. If Statemnts with For loops"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c73b1b4",
   "metadata": {},
   "source": [
    "### 4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8fcd03e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "055f58a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import data frame\n",
    "df_orders_products_merged = pd.read_pickle(r'/Users/emilyseitz/Desktop/emilyseitz/Instacart Basket Analysis /Data/Prepared Data/orders_products_merged.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f4f9698c",
   "metadata": {},
   "outputs": [],
   "source": [
    "path = r'/Users/emilyseitz/Desktop/emilyseitz/Instacart Basket Analysis '"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "38ddbab0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/emilyseitz/Desktop/emilyseitz/Instacart Basket Analysis '"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2fd899e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create smaller subset from dataframe\n",
    "df = df_orders_products_merged[:1000000]\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "efaef85b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000000, 16)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70d42676",
   "metadata": {},
   "source": [
    "### 1. If statements with User Defined Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "255a6468",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create function to apply labels\n",
    "def price_label(row):\n",
    " if row['prices'] <= 5:\n",
    "   return 'Low-range product'\n",
    " elif (row['prices'] > 5) and (row['prices'] <= 15):\n",
    "   return 'Mid-range product'\n",
    " elif row['prices'] > 15:\n",
    "   return 'High range'\n",
    " else: return 'Not enough data'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b33c01f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/9y/1zd7pkhn3gbdpqj7tgj0yv1m0000gn/T/ipykernel_35453/975444633.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['price_range'] = df.apply(price_label, axis=1)\n"
     ]
    }
   ],
   "source": [
    "#Designate location and new column for labels created by function\n",
    "df['price_range'] = df.apply(price_label, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e4c153cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mid-range product    756450\n",
       "Low-range product    243550\n",
       "Name: price_range, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check values for new labels in new column\\\n",
    "df['price_range'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "59bb9fd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14.8"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['prices'].max()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67c91709",
   "metadata": {},
   "source": [
    "#### Confirming max price in subset to confirm results of 0 high-range product look accurate"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4672d37e",
   "metadata": {},
   "source": [
    "### 2. If Statements with loc() Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2209ab30",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use predefined function loc() to create new column & labels\n",
    "df.loc[df['prices'] > 15, 'price_range_loc'] = 'High-range product'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ae716ce1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[(df['prices'] <= 15) & (df['prices'] > 5), 'price_range_loc'] = 'Mid-range product' "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "44254ecc",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df['prices'] <= 5, 'price_range_loc'] = 'Low-range product'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c0d16d76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mid-range product    756450\n",
       "Low-range product    243550\n",
       "Name: price_range_loc, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Verify counts by labels look accurate\n",
    "df['price_range_loc'].value_counts (dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8c465060",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run loc() function on entire dataframe not just the subset\n",
    "df_orders_products_merged.loc[df_orders_products_merged['prices'] > 15, 'price_range_loc'] = 'High-range product'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6552d6a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_orders_products_merged.loc[(df_orders_products_merged['prices'] <= 15) & (df_orders_products_merged['prices'] > 5), 'price_range_loc'] = 'Mid-range product'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "141fe2ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_orders_products_merged.loc[df_orders_products_merged['prices'] <= 5, 'price_range_loc'] = 'Low-range product'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a6ee394e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mid-range product     21890146\n",
       "Low-range product     10126384\n",
       "High-range product      417682\n",
       "Name: price_range_loc, dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_orders_products_merged['price_range_loc'].value_counts (dropna = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c1d685c",
   "metadata": {},
   "source": [
    "### 3. If Statements with For Loops\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "5352f70a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    6209632\n",
       "1    5665830\n",
       "6    4500246\n",
       "2    4217766\n",
       "5    4209449\n",
       "3    3844096\n",
       "4    3787193\n",
       "Name: order_dow, dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check frequency of oders by day of week (0 = saturday)\n",
    "df_orders_products_merged['order_dow'].value_counts (dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "47c4264e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run For Loop argument to create labels for new columns busiest day\n",
    "result = []\n",
    "\n",
    "for value in df_orders_products_merged[\"order_dow\"]:\n",
    "  if value == 0:\n",
    "    result.append(\"Busiest day\")\n",
    "  elif value == 4:\n",
    "    result.append(\"Least busy\")\n",
    "  else:\n",
    "    result.append(\"Regularly busy\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "4426cbcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create new column\n",
    "df_orders_products_merged['busiest_day']= result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "76ec9ba2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Regularly busy    22437387\n",
       "Busiest day        6209632\n",
       "Least busy         3787193\n",
       "Name: busiest_day, dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check results to prior frequncy above\n",
    "df_orders_products_merged['busiest_day'].value_counts (dropna = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07c9ffa9",
   "metadata": {},
   "source": [
    "## Exercise 4.7  responses to # 2-8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "6cd5c076",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run For Loop argument to create labels for new columns busiest days\n",
    "result = []\n",
    "\n",
    "for value in df_orders_products_merged[\"order_dow\"]:  \n",
    "  if value in  [0,1]:\n",
    "    result.append(\"Busiest days\")                                     \n",
    "  elif value in  [3,4]:\n",
    "    result.append(\"Least busiest days\")\n",
    "  else:\n",
    "    result.append(\"Regularly busy\")                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "40f6d555",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create new column 'Busiest days'\n",
    "df_orders_products_merged['busiest_days']= result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "93d60134",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Regularly busy        12927461\n",
       "Busiest days          11875462\n",
       "Least busiest days     7631289\n",
       "Name: busiest_days, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check results against orders_dow data\n",
    "df_orders_products_merged['busiest_days'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f2bd1ac",
   "metadata": {},
   "source": [
    "### The orders for busiest days increased to 11.8M with the 2 days of Saturday and Sunday; the orders for the 2 least busiest days of Tuesday and Wednesday inceased to 7.6M , and the balance of regulary busy days shrunk to 12.9M."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "7488ae22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10    2764390\n",
       "11    2738585\n",
       "14    2691563\n",
       "15    2664522\n",
       "13    2663272\n",
       "12    2620800\n",
       "16    2537469\n",
       "9     2456661\n",
       "17    2089452\n",
       "8     1719952\n",
       "18    1637922\n",
       "19    1259382\n",
       "20     977017\n",
       "7      891928\n",
       "21     796362\n",
       "22     634737\n",
       "23     402612\n",
       "6      290770\n",
       "0      218942\n",
       "1      115786\n",
       "5       88057\n",
       "2       69431\n",
       "4       53283\n",
       "3       51317\n",
       "Name: order_hour_of_day, dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check frequency of orders_hour_of_day\n",
    "df_orders_products_merged['order_hour_of_day'].value_counts (dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "9c643c5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run For Loop argument to create labels for new columns busiest_perios_of_days\n",
    "result = []\n",
    "\n",
    "for value in df_orders_products_merged[\"order_hour_of_day\"]:\n",
    "  if value in  [10,11,14,15,13,12,16,9]:\n",
    "    result.append(\"Most orders\")  \n",
    "  elif value in  [17,8,18,19,20,7,21,22]:\n",
    "    result.append(\"Average orders\")\n",
    "  else:\n",
    "    result.append(\"Fewest orders\")\n",
    "                  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "27b8d705",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create new column 'Busiest Period of Days'\n",
    "df_orders_products_merged['busiest_period_of_days']= result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "17c6ee95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Most orders       21137262\n",
       "Average orders    10006752\n",
       "Fewest orders      1290198\n",
       "Name: busiest_period_of_days, dtype: int64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check against results of orders_dow\n",
    "df_orders_products_merged['busiest_period_of_days'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "56f936f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Export data to pkl\n",
    "df_orders_products_merged.to_pickle(os.path.join(path, 'Data','Prepared Data', 'orders_products_merged_4.7_.pkl'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09827525",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
